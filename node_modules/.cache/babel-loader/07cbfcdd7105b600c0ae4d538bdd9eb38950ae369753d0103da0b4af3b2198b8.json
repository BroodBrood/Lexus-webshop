{"ast":null,"code":"import React,{useState,useCallback}from'react';import{Link}from'react-router-dom';// Map of routes to their lazy-loaded components for prefetching\nimport{jsx as _jsx}from\"react/jsx-runtime\";const routeComponentMap={'/models':()=>import('../pages/ModelsPage'),'/about':()=>import('../pages/AboutPage'),'/experience':()=>import('../pages/ExperiencePage'),'/contact':()=>import('../pages/ContactPage'),'/testdrive':()=>import('../pages/TestDrivePage'),'/technology':()=>import('../pages/TechnologyPage')};/**\n * A Link component that prefetches the target route's component on hover or pointer down\n */const PrefetchLink=_ref=>{let{to,children,...props}=_ref;const[prefetched,setPrefetched]=useState(false);const handlePrefetch=useCallback(()=>{if(prefetched||typeof to!=='string')return;const importComponent=routeComponentMap[to];if(importComponent){// Start preloading the component\nimportComponent();setPrefetched(true);}},[to,prefetched]);return/*#__PURE__*/_jsx(Link,{to:to,onMouseEnter:handlePrefetch,onPointerDown:handlePrefetch,...props,children:children});};export default/*#__PURE__*/React.memo(PrefetchLink);","map":{"version":3,"names":["React","useState","useCallback","Link","jsx","_jsx","routeComponentMap","/models","/about","/experience","/contact","/testdrive","/technology","PrefetchLink","_ref","to","children","props","prefetched","setPrefetched","handlePrefetch","importComponent","onMouseEnter","onPointerDown","memo"],"sources":["/Volumes/ballen/lexus-webshop/lexus-webshop/src/components/PrefetchLink.tsx"],"sourcesContent":["import React, { useState, useCallback } from 'react';\nimport { Link, LinkProps } from 'react-router-dom';\n\n// Map of routes to their lazy-loaded components for prefetching\nconst routeComponentMap: Record<string, () => Promise<any>> = {\n  '/models': () => import('../pages/ModelsPage'),\n  '/about': () => import('../pages/AboutPage'),\n  '/experience': () => import('../pages/ExperiencePage'),\n  '/contact': () => import('../pages/ContactPage'),\n  '/testdrive': () => import('../pages/TestDrivePage'),\n  '/technology': () => import('../pages/TechnologyPage'),\n};\n\ninterface PrefetchLinkProps extends LinkProps {\n  children: React.ReactNode;\n}\n\n/**\n * A Link component that prefetches the target route's component on hover or pointer down\n */\nconst PrefetchLink: React.FC<PrefetchLinkProps> = ({ to, children, ...props }) => {\n  const [prefetched, setPrefetched] = useState(false);\n  \n  const handlePrefetch = useCallback(() => {\n    if (prefetched || typeof to !== 'string') return;\n    \n    const importComponent = routeComponentMap[to];\n    if (importComponent) {\n      // Start preloading the component\n      importComponent();\n      setPrefetched(true);\n    }\n  }, [to, prefetched]);\n  \n  return (\n    <Link \n      to={to} \n      onMouseEnter={handlePrefetch}\n      onPointerDown={handlePrefetch}\n      {...props}\n    >\n      {children}\n    </Link>\n  );\n};\n\nexport default React.memo(PrefetchLink); "],"mappings":"AAAA,MAAO,CAAAA,KAAK,EAAIC,QAAQ,CAAEC,WAAW,KAAQ,OAAO,CACpD,OAASC,IAAI,KAAmB,kBAAkB,CAElD;AAAA,OAAAC,GAAA,IAAAC,IAAA,yBACA,KAAM,CAAAC,iBAAqD,CAAG,CAC5D,SAAS,CAAEC,CAAA,GAAM,MAAM,CAAC,qBAAqB,CAAC,CAC9C,QAAQ,CAAEC,CAAA,GAAM,MAAM,CAAC,oBAAoB,CAAC,CAC5C,aAAa,CAAEC,CAAA,GAAM,MAAM,CAAC,yBAAyB,CAAC,CACtD,UAAU,CAAEC,CAAA,GAAM,MAAM,CAAC,sBAAsB,CAAC,CAChD,YAAY,CAAEC,CAAA,GAAM,MAAM,CAAC,wBAAwB,CAAC,CACpD,aAAa,CAAEC,CAAA,GAAM,MAAM,CAAC,yBAAyB,CACvD,CAAC,CAMD;AACA;AACA,GACA,KAAM,CAAAC,YAAyC,CAAGC,IAAA,EAAgC,IAA/B,CAAEC,EAAE,CAAEC,QAAQ,CAAE,GAAGC,KAAM,CAAC,CAAAH,IAAA,CAC3E,KAAM,CAACI,UAAU,CAAEC,aAAa,CAAC,CAAGlB,QAAQ,CAAC,KAAK,CAAC,CAEnD,KAAM,CAAAmB,cAAc,CAAGlB,WAAW,CAAC,IAAM,CACvC,GAAIgB,UAAU,EAAI,MAAO,CAAAH,EAAE,GAAK,QAAQ,CAAE,OAE1C,KAAM,CAAAM,eAAe,CAAGf,iBAAiB,CAACS,EAAE,CAAC,CAC7C,GAAIM,eAAe,CAAE,CACnB;AACAA,eAAe,CAAC,CAAC,CACjBF,aAAa,CAAC,IAAI,CAAC,CACrB,CACF,CAAC,CAAE,CAACJ,EAAE,CAAEG,UAAU,CAAC,CAAC,CAEpB,mBACEb,IAAA,CAACF,IAAI,EACHY,EAAE,CAAEA,EAAG,CACPO,YAAY,CAAEF,cAAe,CAC7BG,aAAa,CAAEH,cAAe,IAC1BH,KAAK,CAAAD,QAAA,CAERA,QAAQ,CACL,CAAC,CAEX,CAAC,CAED,2BAAehB,KAAK,CAACwB,IAAI,CAACX,YAAY,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}